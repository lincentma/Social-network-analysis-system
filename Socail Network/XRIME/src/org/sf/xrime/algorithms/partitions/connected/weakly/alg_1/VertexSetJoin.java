/*
 * Copyright (C) IBM Corp. 2009.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.sf.xrime.algorithms.partitions.connected.weakly.alg_1;

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.SequenceFileInputFormat;
import org.apache.hadoop.mapred.SequenceFileOutputFormat;
import org.apache.hadoop.util.ToolRunner;
import org.sf.xrime.ProcessorExecutionException;
import org.sf.xrime.algorithms.GraphAlgorithm;
import org.sf.xrime.algorithms.utils.GraphAlgorithmMapReduceBase;
import org.sf.xrime.model.Graph;
import org.sf.xrime.model.vertex.Vertex;
import org.sf.xrime.model.vertex.VertexSet;


/**
 * <p>Generate an upper layer of vertexes, and the covering vertex sets of this
 * new layer. The vertexes in the upper layer are those vertexes with lowest/smallest
 * id in vertex sets of the lower layer.<p>
 * @author xue
 */
public class VertexSetJoin extends GraphAlgorithm {
  /**
   * Default constructor.
   */
  public VertexSetJoin(){
    super();
  }
  /**
   * <p>Emit vertexes in lower layer vertex set (key) and the lowest/smallest
   * vertex id in the set (value). We assume the input is generated by
   * VertexSetMinorJoin.</p>
   * <p>In this way, we make sure that the upper layer will be covered by the
   * new vertex sets.</p>
   * @author xue
   */
  public static class MapClass extends GraphAlgorithmMapReduceBase implements
    Mapper<Text, VertexSet, Text, VertexSet>{

    @Override
    public void map(Text key, VertexSet value,
        OutputCollector<Text, VertexSet> output, Reporter reporter)
        throws IOException {
      // Create a new vertex set with single element.
      VertexSet upper_layer_set = new VertexSet();
      upper_layer_set.addVertex(new Vertex(key.toString()));
      // For each vertex in the set, emit the new vertex set.
      for(Vertex vertex : value.getVertexes()){
        output.collect(new Text(vertex.getId()), upper_layer_set);
      }
    }
  }
  
  /**
   * Generate covering vertex sets for the new upper layer.
   * @author xue
   */
  public static class ReduceClass extends GraphAlgorithmMapReduceBase implements 
    Reducer<Text, VertexSet, Text, VertexSet>{

    @Override
    public void reduce(Text key, Iterator<VertexSet> values,
        OutputCollector<Text, VertexSet> output, Reporter reporter)
        throws IOException {
      // The new vertex set to accommodate vertexes from different lower layer
      // vertex sets.
      VertexSet upper_layer_set = new VertexSet();
      // The new lowest/smallest id (the label) of the upper layer set.
      String label = "";
      while(values.hasNext()){
        VertexSet curr_set = values.next();
        for(Vertex curr_vertex : curr_set.getVertexes()){
          // Find the lowest/smallest id.
          if(label.length()==0 || curr_vertex.getId().compareTo(label)<0)
            label = curr_vertex.getId();
          // It should be ok to not clone the vertex here. Since the vertexes
          // in curr_set will not be affected by values.next(). Actually, they
          // will only be referred to by upper_layer_set. When calling 
          // values.next(), new Vertex objects will be created and put into
          // the VertexSet returned by values.next().
          upper_layer_set.addVertex(curr_vertex);
        }
      }
      // Note: this is a join operation, the input key (a vertex id in lower layer
      // set) may be missing in the upper layer set. I.e., input key != output key.
      output.collect(new Text(label), upper_layer_set);
    }
  }
  
  @Override
  public void setArguments(String[] params) throws ProcessorExecutionException {
    // Make sure there are exactly 2 parameters left.
    if (params.length != 2) {
      throw new ProcessorExecutionException("Wrong number of parameters: " +
                         params.length + " instead of 2.");
    }
    
    // Configure the algorithm instance.
    Graph src = new Graph(Graph.defaultGraph());
    src.setPath(new Path(params[0]));
    Graph dest = new Graph(Graph.defaultGraph());
    dest.setPath(new Path(params[1]));
    
    setSource(src);
    setDestination(dest);
  }

  @Override
  public void execute() throws ProcessorExecutionException {
    JobConf conf = new JobConf(context, VertexSetJoin.class);
    conf.setJobName("VertexSetJoin");
    
    // the keys are vertex identifiers (strings)
    conf.setOutputKeyClass(Text.class);
    // the values are vertex sets (Writable)
    conf.setOutputValueClass(VertexSet.class);
    conf.setMapperClass(MapClass.class);        
    // Since this is a join operation, combiner is not permitted here.
    conf.setReducerClass(ReduceClass.class);
    // makes the file format suitable for machine processing.
    conf.setInputFormat(SequenceFileInputFormat.class);
    conf.setOutputFormat(SequenceFileOutputFormat.class);
    try {
      FileInputFormat.setInputPaths(conf, getSource().getPath());
      FileOutputFormat.setOutputPath(conf, getDestination().getPath());
    } catch (IllegalAccessException e1) {
      throw new ProcessorExecutionException(e1);
    }
    conf.setNumMapTasks(getMapperNum());
    conf.setNumReduceTasks(getReducerNum());
        
    try {
      this.runningJob = JobClient.runJob(conf);
    } catch (IOException e) {
      throw new ProcessorExecutionException(e);
    }
  }
  
  /**
   * @param args
   */
  public static void main(String[] args) {
    try {
      int res = ToolRunner.run(new VertexSetJoin(), args);
      System.exit(res);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
